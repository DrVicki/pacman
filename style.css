@import url('https://fonts.googleapis.com/css?family=Slabo+27px&display=swap');

*, *:after, *:before {
    box-sizing: border-box;
}

/*We’re setting the body to the full width and height of the viewport and centering things right smack dab in the middle of it. Things like the background color and fonts are purely aesthetic.*/
body {
    background: #000;
    color: #fff;
    padding: 0;
    margin: 0;
    font-family: 'Slabo 27px', serif;
    display: flex;
    height: 100vh;
    justify-content: center;
    align-items: center;
}

/*Create pacman body/head. It is merely a circle with a yellow background:*/
.pacman {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    background: #f2d648;
    position: relative;
    margin-top: 20px;
 
}

/* Pacman's (non-existent) eye is also a circle, but smaller and dark gray. We’ll give it absolute positioning so we can place it right where it needs to be:*/
.pacman__eye {
    position: absolute;
    width: 10px;
    height: 10px;
    border-radius: 50%;
    top: 20px;
    right: 40px;
    background: #333333;
}

/* We’re going to create another circle, but make it black this time and overlay it right on top of his yellow head. Then we’re going to use the clip-path property to cut out a slice of it — sort of like an empty pie container except for one last piece of pie. */
.pacman__mouth {
    background: #000;
    position: absolute;
    width: 100%;
    height: 100%;

    /* The polygon() function let’s us draw a free-form shape inside the bounds of the element and that shape serves as a mask that only displays that portion of the element. So, we’re using clip-path and telling it we want a shape (polygon()) that contains a series of points at specific positions (100% 74%, 44% 48%, 100% 21%). */
    clip-path: polygon(100% 74%, 44% 48%, 100% 21% );

    /* pass animation to .pacman__mouth class */
    animation-name: eat;
    animation-duration: 0.7s;
    animation-iteration-count: infinite;
}

/* Let’s make his mouth open and close instead.

We need will animate the clip-path property, and we’ll use @keyframes for that. I’m naming this animation eat. I used the Clippy app (https://bennettfeely.com/clippy/) to get the values. */
@keyframes eat {
    0% {
        clip-path: polygon(100% 74%, 44% 48%, 100% 21%);
    }
    25% {
        clip-path: polygon(100% 60%, 44% 48%, 100% 40%);
    }
    50% {
        clip-path: polygon(100% 50%, 44% 48%, 100% 50%);
    }
    75% {
        clip-path: polygon(100% 59%, 44% 48%, 100% 35% );
    }
    100% {
        clip-path: polygon(100% 74%, 44% 48%, 100% 21%);
    }
}

/* Let's style up the food class. We'll create another circle. */
.pacman__food {
    position: absolute;
    width: 15px;
    height: 15px;
    background: #fff;
    border-radius: 50%;
    top: 40%;
    left: 120px;

    /* pass css animation to .pacman__food class */
    animation-name: food;
    animation-duration: 0.7s;
    animation-iteration-count: infinite;
}

/* Let’s make the food come to pacman using another sprinkle of CSS animation: */
@keyframes food {
    0% {
        transform: translateX(0);
        opacity: 1;
    }
    100% {
        transform: translateX(-50px);
        opacity: 0;
    }
}
